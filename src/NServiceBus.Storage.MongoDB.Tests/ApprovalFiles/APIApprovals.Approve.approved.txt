[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("NServiceBus.Storage.MongoDB.PersistenceTests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("NServiceBus.Storage.MongoDB.Tests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("NServiceBus.Storage.MongoDB.TransactionalSession")]
namespace NServiceBus
{
    public class CompatibilitySettings : NServiceBus.Configuration.AdvancedExtensibility.ExposeSettings
    {
        public NServiceBus.CompatibilitySettings CollectionNamingConvention(System.Func<System.Type, string> collectionNamingConvention) { }
        public NServiceBus.CompatibilitySettings VersionElementName(string versionElementName) { }
    }
    public static class MongoOutboxSettingsExtensions
    {
        public static NServiceBus.Outbox.OutboxSettings DisableReadFallback(this NServiceBus.Outbox.OutboxSettings outboxSettings) { }
        public static NServiceBus.Outbox.OutboxSettings TimeToKeepOutboxDeduplicationData(this NServiceBus.Outbox.OutboxSettings outboxSettings, System.TimeSpan timeToKeepOutboxDeduplicationData) { }
    }
    public class MongoPersistence : NServiceBus.Persistence.PersistenceDefinition, NServiceBus.Persistence.IPersistenceDefinitionFactory<NServiceBus.MongoPersistence>
    {
        [System.Obsolete("The MongoPersistence class is not supposed to be instantiated directly. Will be r" +
            "emoved in version 8.0.0.", true)]
        public MongoPersistence() { }
    }
    public static class MongoSettingsExtensions
    {
        public static NServiceBus.CompatibilitySettings CommunityPersistenceCompatibility(this NServiceBus.PersistenceExtensions<NServiceBus.MongoPersistence> persistenceExtensions) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.MongoPersistence> DatabaseName(this NServiceBus.PersistenceExtensions<NServiceBus.MongoPersistence> persistenceExtensions, string databaseName) { }
        public static void DisableInstaller(this NServiceBus.PersistenceExtensions<NServiceBus.MongoPersistence> persistenceExtensions) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.MongoPersistence> MongoClient(this NServiceBus.PersistenceExtensions<NServiceBus.MongoPersistence> persistenceExtensions, MongoDB.Driver.IMongoClient mongoClient) { }
        [System.Obsolete("Use \'MongoOutboxSettingsExtensions.TimeToKeepOutboxDeduplicationData\' instead. Wi" +
            "ll be removed in version 8.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.MongoPersistence> TimeToKeepOutboxDeduplicationData(this NServiceBus.PersistenceExtensions<NServiceBus.MongoPersistence> persistenceExtensions, System.TimeSpan timeToKeepOutboxDeduplicationData) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.MongoPersistence> UseTransactions(this NServiceBus.PersistenceExtensions<NServiceBus.MongoPersistence> persistenceExtensions, bool useTransactions) { }
    }
    public static class SynchronizedStorageSessionExtensions
    {
        public static MongoDB.Driver.IClientSessionHandle GetClientSession(this NServiceBus.Persistence.ISynchronizedStorageSession session) { }
        public static NServiceBus.Storage.MongoDB.IMongoSynchronizedStorageSession MongoPersistenceSession(this NServiceBus.Persistence.ISynchronizedStorageSession session) { }
    }
}
namespace NServiceBus.Storage.MongoDB
{
    public interface IMongoClientProvider
    {
        MongoDB.Driver.IMongoClient Client { get; }
    }
    public interface IMongoSynchronizedStorageSession
    {
        MongoDB.Driver.IClientSessionHandle? MongoSession { get; }
    }
}
namespace NServiceBus.Testing
{
    public class TestableMongoSynchronizedStorageSession : NServiceBus.Persistence.ISynchronizedStorageSession, NServiceBus.Storage.MongoDB.IMongoSynchronizedStorageSession
    {
        public TestableMongoSynchronizedStorageSession(MongoDB.Driver.IClientSessionHandle clientSessionHandle) { }
        public MongoDB.Driver.IClientSessionHandle MongoSession { get; }
    }
}